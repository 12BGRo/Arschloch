
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;


public class ClientThread extends Thread {
	/**
	 * 
	 */
	private boolean bereit;
	private Spieler spieler;
	private ArrayList<ClientThread> clients;
	private ObjectInputStream input;
	private ObjectOutputStream output;
	private Socket clientSocket;
	
	/**
	 * Konstruktor des ClientThreads.
	 * @param clients
	 * @param clientSocket
	 */
	
	public ClientThread(ArrayList<ClientThread> clients, Socket clientSocket){
		this.clients = clients;
		this.clientSocket = clientSocket;
		try {
			this.input = new ObjectInputStream(this.clientSocket.getInputStream());
			this.output = new ObjectOutputStream(this.clientSocket.getOutputStream());
		} catch (IOException e) {
			// TODO Automatisch generierter Erfassungsblock
			e.printStackTrace();
		}
	}
	
	/**
	 * Gibt zurück, ob der Spieler bereit zum Starten ist
	 * @return true, wenn der Spieler bereit ist
	 */
	public boolean istBereit() {
		return this.bereit;
	}

	/**
	 * Gibt den Namen des Spielers, der dem Thread zugeordnet ist, zurück
	 * @return name des Spielers
	 */
	public String getSpielerName(){
		return this.spieler.getName();
	}
	
	public void out(Object o){
		try {
			this.output.writeObject(o);
			this.output.flush();
		} catch (IOException e) {
			// TODO Automatisch generierter Erfassungsblock
			e.printStackTrace();
		}
	}
	
	public void run(){
		//als erstes den Namen aushandeln
		boolean gibtsSchon = false;
		do {
			gibtsSchon = false;
			String name = null;
			try {
				name = input.readUTF();
			} catch (IOException e) {
				// TODO Automatisch generierter Erfassungsblock
				e.printStackTrace();
			}
			int anzahl = clients.size();
			for (int i = 0; i<clients.size()-1; i++){
				//nicht den letzten abfragen, der hat ja noch keinen Namen
				ClientThread th = clients.get(i);
				if (th.getSpielerName().equals(name)){
					gibtsSchon = true;
				}
			}
			if(!gibtsSchon){
				this.spieler.setName(name);
			}
			else{
				this.out(new NameGibtsSchonException());
			}
		}
		while (gibtsSchon);
		
		//warten, bis das bereit-Signal kommt
		while (!this.bereit){
			try {
				if (input.readObject().equals("bereit"));
			} catch (ClassNotFoundException e) {
				// TODO Automatisch generierter Erfassungsblock
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Automatisch generierter Erfassungsblock
				e.printStackTrace();
			}
		}
	}
}
